1.1 线程池概念及优势
C++线程池简介
线程池是一种并发编程技术，它能有效地管理并发的线程、减少资源占用和提高程序的性能。C++线程池通过<thread>库，结合C++ 11、14、17、20等的新特性，简化了多线程编程的实现。

作用：
1.提高性能与资源利用率：
线程池主要解决两个问题：线程创建与销毁的开销以及线程竞争造成的性能瓶颈。
通过预先创建一组线程并复用它们，线程池有效地降低了线程创建和销毁的时间和资源消耗。
同时，通过管理线程并发数量，线程池有助于减少线程之间的竞争，增加资源利用率，并提高程序运行的性能。
2.线程创建开销解决
多线程环境下，每当需要执行一个任务时，创建与销毁线程都需要额外的系统资源。线程池通过预先创建一定数量的线程，可以减少这种资源消耗
3.线程竞争问题解决
过多的线程可能导致线程竞争，影响系统性能。线程池通过维护一个可控制的并发数量，有助于减轻线程之间的竞争。例如，当CPU密集型任务和I/O密集型任务共存时，可以通过调整线程池资源，实现更高效的负载平衡。

（什么叫负载平衡：一种计算机网络技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁碟驱动器或其他资源中分配负载，以达到最佳化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。比如有多个人，任务来时要合理分配使得效率最大，避免一些人干活另一些人不干活，导致拖累整体干活效率）
原理：
线程池通过预先创建和调度复用线程来实现资源优化。这个过程主要包括：创建线程、任务队列与调度、以及线程执行及回收。
创建线程
线程池在初始化时会预先创建一定数量的线程，这些线程将会被后续任务复用。线程的数量可以根据实际需求和系统资源进行配置。
任务队列与调度
线程池通过维护一个任务队列来管理待执行任务。当线程池收到一个新任务时，它会将任务加入到任务队列中。线程会按照预定策略（例如FIFO）从队列中取出任务执行。
线程执行及回收
线程执行任务时，会遵循线程池的调度策略从任务队列中获取任务。任务完成后，线程将被放回到线程池中等待下一个任务，而不是销毁。这种复用机制提高了资源利用率并降低了线程创建销毁的开销